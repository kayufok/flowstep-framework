// FlowStep Spring Boot Starter - Parent Project
plugins {
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

// Parent project configuration
group = 'net.xrftech'
version = '1.0.0'
description = 'FlowStep Spring Boot Starter - Parent Project'

// Common repositories for all modules
allprojects {
    repositories {
        mavenCentral()
    }
}

// Shared configuration for all subprojects
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = rootProject.group
    version = rootProject.version

    // Common dependencies versions
    ext {
        lombokVersion = '1.18.30'
        slf4jVersion = '2.0.9'
        validationApiVersion = '3.0.2'
        
        // Test dependencies
        junitVersion = '5.10.1'
        mockitoVersion = '5.7.0'
        assertjVersion = '3.24.2'
        archunitVersion = '1.2.1'
    }

    // Common test configuration
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
        maxHeapSize = "1G"
    }

    // Common Java configuration
    java {
        withJavadocJar()
        withSourcesJar()
    }

    // Common dependencies for all modules
    dependencies {
        // Lombok - Compile time only
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        
        // SLF4J - Logging facade
        compileOnly "org.slf4j:slf4j-api:${slf4jVersion}"
        
        // Optional: Validation API - subprojects will define their own based on Spring Boot version
        
        // Test Dependencies
        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        
        // Test Lombok support
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        
        // Optional ArchUnit - only if present on classpath
        testCompileOnly "com.tngtech.archunit:archunit-junit5:${archunitVersion}"
    }

    // Javadoc Configuration
    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding = 'UTF-8'
        options.charSet = 'UTF-8'
        options.author = true
        options.version = true
        options.use = true
        options.windowTitle = "${project.name} ${version} API"
        options.docTitle = "${project.name} (${version})"
        options.bottom = "Copyright © 2024 XRF Technology. All rights reserved."
    }

    // Publishing Configuration
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                
                pom {
                    name = project.name
                    description = project.description
                    url = 'https://github.com/kayufok/flowstep-framework'
                    inceptionYear = '2024'
                    
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }
                    
                    developers {
                        developer {
                            id = 'kayufok'
                            name = 'FlowStep Team'
                            email = 'flowstep@xrftech.net'
                            url = 'https://github.com/kayufok'
                        }
                    }
                    
                    scm {
                        connection = 'scm:git:https://github.com/kayufok/flowstep-framework.git'
                        developerConnection = 'scm:git:ssh://git@github.com:kayufok/flowstep-framework.git'
                        url = 'https://github.com/kayufok/flowstep-framework'
                        tag = 'HEAD'
                    }
                    
                    issueManagement {
                        system = 'GitHub Issues'
                        url = 'https://github.com/kayufok/flowstep-framework/issues'
                    }
                }
            }
        }
        
    }

    // Signing Configuration (for Maven Central)
    signing {
        required { gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}

// Nexus Publishing Configuration (works with Central Portal credentials)
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            
            // Use Central Portal credentials (they work with OSSRH endpoints too)
            username = findProperty('centralPortalUsername') ?: findProperty('sonatypeUsername') ?: System.getenv('CENTRAL_PORTAL_USERNAME')
            password = findProperty('centralPortalPassword') ?: findProperty('sonatypePassword') ?: System.getenv('CENTRAL_PORTAL_PASSWORD')
        }
    }
    
    connectTimeout = Duration.ofMinutes(5)
    clientTimeout = Duration.ofMinutes(5)
}

subprojects {
    // Ensure reproducible builds
    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}


// Custom tasks for project management
task printVersion {
    doLast {
        println "FlowStep Spring Boot Starter Version: $version"
        println "Group: $group"
        println "Modules: ${subprojects.collect { it.name }}"
    }
}

// Release preparation task
task prepareRelease {
    group = 'release'
    description = 'Prepares the project for release'
    
    doLast {
        // Verify no SNAPSHOT dependencies in subprojects
        def hasSnapshots = false
        subprojects.each { project ->
            project.configurations.findAll { it.canBeResolved }.each { config ->
                config.resolvedConfiguration.resolvedArtifacts.each { artifact ->
                    if (artifact.moduleVersion.id.version.contains('SNAPSHOT')) {
                        println "SNAPSHOT dependency found in ${project.name}: ${artifact.moduleVersion.id}"
                        hasSnapshots = true
                    }
                }
            }
        }
        
        if (hasSnapshots) {
            throw new GradleException('Cannot release with SNAPSHOT dependencies')
        }
        
        // Verify version is not SNAPSHOT
        if (version.toString().contains('SNAPSHOT')) {
            throw new GradleException('Cannot release SNAPSHOT version')
        }
        
        println "✅ Release preparation complete"
        println "Version: $version"
        println "All checks passed!"
    }
}

// Wrapper task for consistent Gradle version
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}